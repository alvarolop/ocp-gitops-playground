---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: {{ .Values.global.clusterName }}
  namespace: {{ .Values.global.namespace }}
spec:
  kustomizeBuildOptions: '--enable-helm --enable-alpha-plugins'
  # Needed because InferenceService create route with label app.kubernetes.io/instance so try to manage it and delete it
  resourceTrackingMethod: annotation
  # https://www.redhat.com/en/blog/gitops-quality-life-tips
  extraConfig:
    globalProjects: |-
      - labelSelector:
          matchExpressions:
            - key: argocd.argoproj.io/project-inherit
              operator: In
              values:
                - global
        projectName: global
  server:
    autoscale:
      enabled: false
    enableRolloutsUI: {{ .Values.argoRollout.enabled }}
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  monitoring:
    enabled: true
  notifications:
    enabled: true
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  rbac:
    defaultPolicy: ''
    policy: |
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: '[groups]'
  disableAdmin: true
  # usersAnonymousEnabled: true
  repo:
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}
  # https://access.redhat.com/solutions/7015069
  resourceHealthChecks:
  # https://argo-cd.readthedocs.io/en/stable/operator-manual/health/#argocd-app
  # If you are using app-of-apps pattern and orchestrating synchronization using sync waves
  - group: argoproj.io
    kind: Application
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          if obj.status.health.message ~= nil then
            hs.message = obj.status.health.message
          end
        end
      end
      return hs
  # https://github.com/argoproj/argo-cd/blob/master/resource_customizations/operators.coreos.com/Subscription/health.lua
  # Old: https://access.redhat.com/solutions/7015069
  - group: operators.coreos.com
    kind: Subscription
    check: |
      local health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          local numDegraded = 0
          local numPending = 0
          local msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "InstallPlanPending" and condition.status == "True" then
              numPending = numPending + 1
            elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
              numDegraded = numDegraded + 1
            elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
              numDegraded = numDegraded + 1
            end
          end

          -- Available states: undef/nil, UpgradeAvailable, UpgradePending, UpgradeFailed, AtLatestKnown
          -- Source: https://github.com/openshift/operator-framework-olm/blob/5e2c73b7663d0122c9dc3e59ea39e515a31e2719/staging/api/pkg/operators/v1alpha1/subscription_types.go#L17-L23
          if obj.status.state == nil  then
            numPending = numPending + 1
            msg = msg .. ".status.state not yet known\n"
          elseif obj.status.state == "" or obj.status.state == "UpgradeAvailable" or obj.status.state == "UpgradePending" then
            numPending = numPending + 1
            msg = msg .. ".status.state is '" .. obj.status.state .. "'\n"
          elseif obj.status.state == "UpgradeFailed" then
            numDegraded = numDegraded + 1
            msg = msg .. ".status.state is '" .. obj.status.state .. "'\n"
          else
            -- Last possibility of .status.state: AtLatestKnown
            msg =  msg .. ".status.state is '" .. obj.status.state .. "'\n"
          end
      
          if numDegraded == 0 and numPending == 0 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          elseif numPending > 0 and numDegraded == 0 then
            health_status.status = "Progressing"
            health_status.message = msg
            return health_status
          else
            health_status.status = "Degraded"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "An install plan for a subscription is pending installation"
      return health_status
  # https://github.com/argoproj/argo-cd/issues/12840#issuecomment-1614972793
  - kind: PersistentVolumeClaim
    check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Pending" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
          if obj.status.phase == "Bound" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs
  # https://github.com/argoproj/argo-cd/tree/master/resource_customizations/cert-manager.io
  - group: cert-manager.io
    kind: ClusterIssuer
    check: |
      local hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Initializing ClusterIssuer"
      return hs
  - group: cert-manager.io
    kind: Issuer
    check: |
      local hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Initializing issuer"
      return hs
  - group: cert-manager.io
    kind: Certificate
    check: |
      local hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then

          -- Always Handle Issuing First to ensure consistent behaviour
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Issuing" and condition.status == "True" then
              hs.status = "Progressing"
              hs.message = condition.message
              return hs
            end
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs
