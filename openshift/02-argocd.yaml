apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: gitops-argocd
  annotations:
    description: Template to deploy a Red Hat Openshift GitOps ArgoCd cluster on OCP.
    tags: argocd,gitops,operator
    iconClass: icon-git
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
objects:

  - apiVersion: v1
    kind: Namespace
    metadata:
      name: ${ARGOCD_NAMESPACE}
      annotations:
        openshift.io/description: "This project contains all the resources related to the ArgoCD installation"
        openshift.io/display-name: "GitOps"
      labels:
        openshift.io/cluster-monitoring: "true"

  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ${ARGOCD_CLUSTER_NAME}-argocd-application-controller-cluster-admin
    subjects:
      - kind: ServiceAccount
        name: ${ARGOCD_CLUSTER_NAME}-argocd-application-controller
        namespace: ${ARGOCD_NAMESPACE}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin

  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ${ARGOCD_CLUSTER_NAME}-applicationset-controller-cluster-admin
    subjects:
      - kind: ServiceAccount
        name: ${ARGOCD_CLUSTER_NAME}-applicationset-controller
        namespace: ${ARGOCD_NAMESPACE}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin

  - apiVersion: argoproj.io/v1alpha1
    kind: AppProject
    metadata:
      name: default
      namespace: ${ARGOCD_NAMESPACE}
    spec:
      clusterResourceWhitelist:
        - group: '*'
          kind: '*'
      destinations:
        - namespace: '*'
          server: '*'
      sourceRepos:
        - '*'

  - apiVersion: argoproj.io/v1beta1
    kind: ArgoCD
    metadata:
      name: ${ARGOCD_CLUSTER_NAME}
      namespace: ${ARGOCD_NAMESPACE}
    spec:
      kustomizeBuildOptions: '--enable-helm --enable-alpha-plugins'
      server:
        autoscale:
          enabled: false
        grpc:
          ingress:
            enabled: false
        ingress:
          enabled: false
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 125m
            memory: 128Mi
        route:
          enabled: true
          tls:
            termination: reencrypt
        service:
          type: ''
      grafana:
        enabled: false
        ingress:
          enabled: false
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 128Mi
        route:
          enabled: false
      monitoring:
        enabled: true
      notifications:
        enabled: true
      prometheus:
        enabled: false
        ingress:
          enabled: false
        route:
          enabled: false
      initialSSHKnownHosts: {}
      sso:
        dex:
          openShiftOAuth: true
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 128Mi
        provider: dex
      applicationSet:
        resources:
          limits:
            cpu: '2'
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        webhookServer:
          ingress:
            enabled: false
          route:
            enabled: false
      rbac:
        defaultPolicy: ''
        policy: |
          g, system:cluster-admins, role:admin
          g, cluster-admins, role:admin
        scopes: '[groups]'
      disableAdmin: true
      # usersAnonymousEnabled: true
      repo:
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 256Mi
      resourceExclusions: |
        - apiGroups:
          - tekton.dev
          clusters:
          - '*'
          kinds:
          - TaskRun
          - PipelineRun
      ha:
        enabled: false
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 128Mi
      tls:
        ca: {}
      redis:
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 128Mi
      controller:
        processors: {}
        resources:
          limits:
            cpu: '2'
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 1Gi
        sharding: {}
      # https://access.redhat.com/solutions/7015069
      resourceHealthChecks:
        - check: |
            health_status = {}
            if obj.status ~= nil then
              if obj.status.conditions ~= nil then
                numDegraded = 0
                numPending = 0
                msg = ""
                for i, condition in pairs(obj.status.conditions) do
                  msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
                  if (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                    numDegraded = numDegraded + 1
                  elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                    numDegraded = numDegraded + 1
                end
              end
                if numDegraded == 0 and numPending == 0 then
                  health_status.status = "Healthy"
                  health_status.message = msg
                  return health_status
                else
                  health_status.status = "Degraded"
                  health_status.message = msg
                  return health_status
                end
              end
            end
            health_status.status = "Progressing"
            health_status.message = "An install plan for a subscription is pending installation"
            return health_status
          group: operators.coreos.com
          kind: Subscription

parameters:
- name: ARGOCD_NAMESPACE
  description: "The project where the cluster will be installed."
  required: false
  value: "gitops"
- name: ARGOCD_CLUSTER_NAME
  description: "The name of the ArgoCD cluster."
  required: false
  value: "argocd-cluster"